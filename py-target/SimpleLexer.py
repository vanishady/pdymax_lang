# Generated from Simple.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,59,451,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,200,8,13,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
        1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,
        1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,
        1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,
        1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,3,47,318,8,47,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,3,48,360,8,48,1,49,1,49,4,49,364,8,49,11,49,12,49,365,1,49,
        3,49,369,8,49,1,50,1,50,3,50,373,8,50,1,50,1,50,1,51,1,51,5,51,379,
        8,51,10,51,12,51,382,9,51,1,52,1,52,5,52,386,8,52,10,52,12,52,389,
        9,52,1,52,1,52,1,53,1,53,3,53,395,8,53,1,54,1,54,5,54,399,8,54,10,
        54,12,54,402,9,54,1,54,4,54,405,8,54,11,54,12,54,406,3,54,409,8,
        54,1,55,3,55,412,8,55,1,55,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,
        58,1,59,1,59,3,59,425,8,59,1,60,1,60,3,60,429,8,60,1,61,3,61,432,
        8,61,1,61,1,61,1,62,4,62,437,8,62,11,62,12,62,438,1,62,1,62,1,63,
        1,63,5,63,445,8,63,10,63,12,63,448,9,63,1,63,1,63,0,0,64,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
        26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
        37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,
        48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,0,115,
        0,117,0,119,0,121,0,123,57,125,58,127,59,1,0,5,2,0,65,90,97,122,
        1,0,48,57,1,0,49,57,2,0,9,9,32,32,2,0,10,10,13,13,468,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
        83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
        93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,
        0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,
        0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,1,129,1,0,0,0,3,
        131,1,0,0,0,5,133,1,0,0,0,7,135,1,0,0,0,9,137,1,0,0,0,11,139,1,0,
        0,0,13,149,1,0,0,0,15,152,1,0,0,0,17,155,1,0,0,0,19,161,1,0,0,0,
        21,169,1,0,0,0,23,175,1,0,0,0,25,184,1,0,0,0,27,199,1,0,0,0,29,201,
        1,0,0,0,31,204,1,0,0,0,33,209,1,0,0,0,35,214,1,0,0,0,37,218,1,0,
        0,0,39,228,1,0,0,0,41,234,1,0,0,0,43,243,1,0,0,0,45,248,1,0,0,0,
        47,252,1,0,0,0,49,259,1,0,0,0,51,262,1,0,0,0,53,264,1,0,0,0,55,266,
        1,0,0,0,57,268,1,0,0,0,59,270,1,0,0,0,61,272,1,0,0,0,63,274,1,0,
        0,0,65,276,1,0,0,0,67,278,1,0,0,0,69,281,1,0,0,0,71,284,1,0,0,0,
        73,286,1,0,0,0,75,288,1,0,0,0,77,291,1,0,0,0,79,293,1,0,0,0,81,295,
        1,0,0,0,83,297,1,0,0,0,85,300,1,0,0,0,87,303,1,0,0,0,89,306,1,0,
        0,0,91,309,1,0,0,0,93,312,1,0,0,0,95,317,1,0,0,0,97,359,1,0,0,0,
        99,361,1,0,0,0,101,370,1,0,0,0,103,376,1,0,0,0,105,383,1,0,0,0,107,
        394,1,0,0,0,109,408,1,0,0,0,111,411,1,0,0,0,113,416,1,0,0,0,115,
        418,1,0,0,0,117,420,1,0,0,0,119,424,1,0,0,0,121,428,1,0,0,0,123,
        431,1,0,0,0,125,436,1,0,0,0,127,442,1,0,0,0,129,130,5,59,0,0,130,
        2,1,0,0,0,131,132,5,61,0,0,132,4,1,0,0,0,133,134,5,44,0,0,134,6,
        1,0,0,0,135,136,5,46,0,0,136,8,1,0,0,0,137,138,5,58,0,0,138,10,1,
        0,0,0,139,140,5,114,0,0,140,141,5,111,0,0,141,142,5,117,0,0,142,
        143,5,110,0,0,143,144,5,100,0,0,144,145,5,115,0,0,145,146,5,32,0,
        0,146,147,5,100,0,0,147,148,5,111,0,0,148,12,1,0,0,0,149,150,5,62,
        0,0,150,151,5,61,0,0,151,14,1,0,0,0,152,153,5,60,0,0,153,154,5,61,
        0,0,154,16,1,0,0,0,155,156,5,112,0,0,156,157,5,97,0,0,157,158,5,
        116,0,0,158,159,5,99,0,0,159,160,5,104,0,0,160,18,1,0,0,0,161,162,
        5,105,0,0,162,163,5,110,0,0,163,164,5,99,0,0,164,165,5,108,0,0,165,
        166,5,117,0,0,166,167,5,100,0,0,167,168,5,101,0,0,168,20,1,0,0,0,
        169,170,5,98,0,0,170,171,5,108,0,0,171,172,5,111,0,0,172,173,5,99,
        0,0,173,174,5,107,0,0,174,22,1,0,0,0,175,176,5,115,0,0,176,177,5,
        117,0,0,177,178,5,98,0,0,178,179,5,98,0,0,179,180,5,108,0,0,180,
        181,5,111,0,0,181,182,5,99,0,0,182,183,5,107,0,0,183,24,1,0,0,0,
        184,185,5,58,0,0,185,186,5,58,0,0,186,26,1,0,0,0,187,188,5,100,0,
        0,188,189,5,105,0,0,189,190,5,115,0,0,190,191,5,99,0,0,191,192,5,
        111,0,0,192,193,5,110,0,0,193,194,5,110,0,0,194,195,5,101,0,0,195,
        196,5,99,0,0,196,200,5,116,0,0,197,198,5,58,0,0,198,200,5,120,0,
        0,199,187,1,0,0,0,199,197,1,0,0,0,200,28,1,0,0,0,201,202,5,105,0,
        0,202,203,5,102,0,0,203,30,1,0,0,0,204,205,5,101,0,0,205,206,5,108,
        0,0,206,207,5,105,0,0,207,208,5,102,0,0,208,32,1,0,0,0,209,210,5,
        101,0,0,210,211,5,108,0,0,211,212,5,115,0,0,212,213,5,101,0,0,213,
        34,1,0,0,0,214,215,5,102,0,0,215,216,5,111,0,0,216,217,5,114,0,0,
        217,36,1,0,0,0,218,219,5,116,0,0,219,220,5,104,0,0,220,221,5,105,
        0,0,221,222,5,115,0,0,222,223,5,114,0,0,223,224,5,111,0,0,224,225,
        5,117,0,0,225,226,5,110,0,0,226,227,5,100,0,0,227,38,1,0,0,0,228,
        229,5,98,0,0,229,230,5,114,0,0,230,231,5,101,0,0,231,232,5,97,0,
        0,232,233,5,107,0,0,233,40,1,0,0,0,234,235,5,99,0,0,235,236,5,111,
        0,0,236,237,5,110,0,0,237,238,5,116,0,0,238,239,5,105,0,0,239,240,
        5,110,0,0,240,241,5,117,0,0,241,242,5,101,0,0,242,42,1,0,0,0,243,
        244,5,112,0,0,244,245,5,97,0,0,245,246,5,115,0,0,246,247,5,115,0,
        0,247,44,1,0,0,0,248,249,5,101,0,0,249,250,5,110,0,0,250,251,5,100,
        0,0,251,46,1,0,0,0,252,253,5,114,0,0,253,254,5,101,0,0,254,255,5,
        99,0,0,255,256,5,97,0,0,256,257,5,108,0,0,257,258,5,108,0,0,258,
        48,1,0,0,0,259,260,5,116,0,0,260,261,5,111,0,0,261,50,1,0,0,0,262,
        263,5,40,0,0,263,52,1,0,0,0,264,265,5,41,0,0,265,54,1,0,0,0,266,
        267,5,123,0,0,267,56,1,0,0,0,268,269,5,125,0,0,269,58,1,0,0,0,270,
        271,5,91,0,0,271,60,1,0,0,0,272,273,5,93,0,0,273,62,1,0,0,0,274,
        275,5,60,0,0,275,64,1,0,0,0,276,277,5,62,0,0,277,66,1,0,0,0,278,
        279,5,61,0,0,279,280,5,61,0,0,280,68,1,0,0,0,281,282,5,33,0,0,282,
        283,5,61,0,0,283,70,1,0,0,0,284,285,5,43,0,0,285,72,1,0,0,0,286,
        287,5,45,0,0,287,74,1,0,0,0,288,289,5,42,0,0,289,290,5,42,0,0,290,
        76,1,0,0,0,291,292,5,42,0,0,292,78,1,0,0,0,293,294,5,47,0,0,294,
        80,1,0,0,0,295,296,5,37,0,0,296,82,1,0,0,0,297,298,5,124,0,0,298,
        299,5,124,0,0,299,84,1,0,0,0,300,301,5,38,0,0,301,302,5,38,0,0,302,
        86,1,0,0,0,303,304,5,45,0,0,304,305,5,126,0,0,305,88,1,0,0,0,306,
        307,5,43,0,0,307,308,5,126,0,0,308,90,1,0,0,0,309,310,5,47,0,0,310,
        311,5,126,0,0,311,92,1,0,0,0,312,313,5,42,0,0,313,314,5,126,0,0,
        314,94,1,0,0,0,315,318,3,97,48,0,316,318,3,99,49,0,317,315,1,0,0,
        0,317,316,1,0,0,0,318,96,1,0,0,0,319,320,5,97,0,0,320,321,5,114,
        0,0,321,322,5,114,0,0,322,323,5,97,0,0,323,360,5,121,0,0,324,325,
        5,99,0,0,325,326,5,111,0,0,326,327,5,111,0,0,327,328,5,114,0,0,328,
        329,5,100,0,0,329,360,5,115,0,0,330,331,5,102,0,0,331,332,5,108,
        0,0,332,333,5,111,0,0,333,334,5,97,0,0,334,335,5,116,0,0,335,336,
        5,97,0,0,336,337,5,116,0,0,337,338,5,111,0,0,338,360,5,109,0,0,339,
        340,5,115,0,0,340,341,5,121,0,0,341,342,5,109,0,0,342,343,5,98,0,
        0,343,344,5,111,0,0,344,345,5,108,0,0,345,346,5,97,0,0,346,347,5,
        116,0,0,347,348,5,111,0,0,348,360,5,109,0,0,349,350,5,116,0,0,350,
        351,5,101,0,0,351,352,5,120,0,0,352,360,5,116,0,0,353,354,5,109,
        0,0,354,355,5,115,0,0,355,360,5,103,0,0,356,357,5,111,0,0,357,358,
        5,98,0,0,358,360,5,106,0,0,359,319,1,0,0,0,359,324,1,0,0,0,359,330,
        1,0,0,0,359,339,1,0,0,0,359,349,1,0,0,0,359,353,1,0,0,0,359,356,
        1,0,0,0,360,98,1,0,0,0,361,363,5,92,0,0,362,364,3,113,56,0,363,362,
        1,0,0,0,364,365,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,368,
        1,0,0,0,367,369,5,126,0,0,368,367,1,0,0,0,368,369,1,0,0,0,369,100,
        1,0,0,0,370,372,5,36,0,0,371,373,5,45,0,0,372,371,1,0,0,0,372,373,
        1,0,0,0,373,374,1,0,0,0,374,375,3,115,57,0,375,102,1,0,0,0,376,380,
        3,119,59,0,377,379,3,121,60,0,378,377,1,0,0,0,379,382,1,0,0,0,380,
        378,1,0,0,0,380,381,1,0,0,0,381,104,1,0,0,0,382,380,1,0,0,0,383,
        387,5,39,0,0,384,386,3,113,56,0,385,384,1,0,0,0,386,389,1,0,0,0,
        387,385,1,0,0,0,387,388,1,0,0,0,388,390,1,0,0,0,389,387,1,0,0,0,
        390,391,5,39,0,0,391,106,1,0,0,0,392,395,3,109,54,0,393,395,3,111,
        55,0,394,392,1,0,0,0,394,393,1,0,0,0,395,108,1,0,0,0,396,400,3,117,
        58,0,397,399,3,115,57,0,398,397,1,0,0,0,399,402,1,0,0,0,400,398,
        1,0,0,0,400,401,1,0,0,0,401,409,1,0,0,0,402,400,1,0,0,0,403,405,
        5,48,0,0,404,403,1,0,0,0,405,406,1,0,0,0,406,404,1,0,0,0,406,407,
        1,0,0,0,407,409,1,0,0,0,408,396,1,0,0,0,408,404,1,0,0,0,409,110,
        1,0,0,0,410,412,3,109,54,0,411,410,1,0,0,0,411,412,1,0,0,0,412,413,
        1,0,0,0,413,414,5,46,0,0,414,415,3,109,54,0,415,112,1,0,0,0,416,
        417,7,0,0,0,417,114,1,0,0,0,418,419,7,1,0,0,419,116,1,0,0,0,420,
        421,7,2,0,0,421,118,1,0,0,0,422,425,5,95,0,0,423,425,3,113,56,0,
        424,422,1,0,0,0,424,423,1,0,0,0,425,120,1,0,0,0,426,429,3,113,56,
        0,427,429,3,115,57,0,428,426,1,0,0,0,428,427,1,0,0,0,429,122,1,0,
        0,0,430,432,5,13,0,0,431,430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,
        0,0,433,434,5,10,0,0,434,124,1,0,0,0,435,437,7,3,0,0,436,435,1,0,
        0,0,437,438,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,440,1,0,
        0,0,440,441,6,62,0,0,441,126,1,0,0,0,442,446,5,35,0,0,443,445,8,
        4,0,0,444,443,1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,1,
        0,0,0,447,449,1,0,0,0,448,446,1,0,0,0,449,450,6,63,0,0,450,128,1,
        0,0,0,19,0,199,317,359,365,368,372,380,387,394,400,406,408,411,424,
        428,431,438,446,1,6,0,0
    ]

class SimpleLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    PATCH = 9
    INCLUDE = 10
    BLOCK = 11
    SUBBLOCK = 12
    CONNECT = 13
    DISCONNECT = 14
    IF = 15
    ELIF = 16
    ELSE = 17
    FOR = 18
    THISROUND = 19
    BREAK = 20
    CONTINUE = 21
    PASS = 22
    END = 23
    RECALL = 24
    TO = 25
    L_PAREN = 26
    R_PAREN = 27
    L_CURLY = 28
    R_CURLY = 29
    L_BRACKET = 30
    R_BRACKET = 31
    L_ANGLE = 32
    R_ANGLE = 33
    EQ = 34
    NOT_EQ = 35
    PLUS = 36
    MINUS = 37
    POW = 38
    STAR = 39
    DIV = 40
    MOD = 41
    OR = 42
    AND = 43
    SIGMINUS = 44
    SIGPLUS = 45
    SIGDIV = 46
    SIGSTAR = 47
    NODETYPE = 48
    GENERALTYPE = 49
    OBJTYPE = 50
    INOUTID = 51
    ID = 52
    SYMBOL = 53
    NUMBER = 54
    INTEGER = 55
    FLOAT = 56
    NL = 57
    WS = 58
    COMMENT = 59

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'='", "','", "'.'", "':'", "'rounds do'", "'>='", "'<='", 
            "'patch'", "'include'", "'block'", "'subblock'", "'::'", "'if'", 
            "'elif'", "'else'", "'for'", "'thisround'", "'break'", "'continue'", 
            "'pass'", "'end'", "'recall'", "'to'", "'('", "')'", "'{'", 
            "'}'", "'['", "']'", "'<'", "'>'", "'=='", "'!='", "'+'", "'-'", 
            "'**'", "'*'", "'/'", "'%'", "'||'", "'&&'", "'-~'", "'+~'", 
            "'/~'", "'*~'" ]

    symbolicNames = [ "<INVALID>",
            "PATCH", "INCLUDE", "BLOCK", "SUBBLOCK", "CONNECT", "DISCONNECT", 
            "IF", "ELIF", "ELSE", "FOR", "THISROUND", "BREAK", "CONTINUE", 
            "PASS", "END", "RECALL", "TO", "L_PAREN", "R_PAREN", "L_CURLY", 
            "R_CURLY", "L_BRACKET", "R_BRACKET", "L_ANGLE", "R_ANGLE", "EQ", 
            "NOT_EQ", "PLUS", "MINUS", "POW", "STAR", "DIV", "MOD", "OR", 
            "AND", "SIGMINUS", "SIGPLUS", "SIGDIV", "SIGSTAR", "NODETYPE", 
            "GENERALTYPE", "OBJTYPE", "INOUTID", "ID", "SYMBOL", "NUMBER", 
            "INTEGER", "FLOAT", "NL", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "PATCH", "INCLUDE", "BLOCK", "SUBBLOCK", "CONNECT", 
                  "DISCONNECT", "IF", "ELIF", "ELSE", "FOR", "THISROUND", 
                  "BREAK", "CONTINUE", "PASS", "END", "RECALL", "TO", "L_PAREN", 
                  "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACKET", "R_BRACKET", 
                  "L_ANGLE", "R_ANGLE", "EQ", "NOT_EQ", "PLUS", "MINUS", 
                  "POW", "STAR", "DIV", "MOD", "OR", "AND", "SIGMINUS", 
                  "SIGPLUS", "SIGDIV", "SIGSTAR", "NODETYPE", "GENERALTYPE", 
                  "OBJTYPE", "INOUTID", "ID", "SYMBOL", "NUMBER", "INTEGER", 
                  "FLOAT", "LETTER", "DIGIT", "NON_ZERO_DIGIT", "ID_START", 
                  "ID_CONTINUE", "NL", "WS", "COMMENT" ]

    grammarFileName = "Simple.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


