# Generated from Pdaw.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,51,377,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,
        1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,
        1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,
        1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,
        1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,262,8,40,1,41,
        1,41,4,41,266,8,41,11,41,12,41,267,1,42,1,42,5,42,272,8,42,10,42,
        12,42,275,9,42,1,42,4,42,278,8,42,11,42,12,42,279,1,42,3,42,283,
        8,42,3,42,285,8,42,1,43,1,43,5,43,289,8,43,10,43,12,43,292,9,43,
        1,44,1,44,5,44,296,8,44,10,44,12,44,299,9,44,1,44,1,44,1,45,1,45,
        3,45,305,8,45,1,46,3,46,308,8,46,1,46,1,46,5,46,312,8,46,10,46,12,
        46,315,9,46,1,46,4,46,318,8,46,11,46,12,46,319,3,46,322,8,46,1,47,
        3,47,325,8,47,1,47,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,
        1,51,3,51,338,8,51,1,52,1,52,1,52,3,52,343,8,52,1,53,1,53,1,53,1,
        53,1,53,3,53,350,8,53,1,54,1,54,1,54,3,54,355,8,54,1,55,3,55,358,
        8,55,1,55,1,55,1,56,4,56,363,8,56,11,56,12,56,364,1,56,1,56,1,57,
        1,57,5,57,371,8,57,10,57,12,57,374,9,57,1,57,1,57,0,0,58,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
        26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
        37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,
        48,97,0,99,0,101,0,103,0,105,0,107,0,109,0,111,49,113,50,115,51,
        1,0,6,2,0,65,90,97,122,1,0,48,57,1,0,49,57,4,0,44,44,46,47,92,92,
        95,95,2,0,9,9,32,32,2,0,10,10,13,13,394,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
        95,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,1,117,1,0,0,
        0,3,119,1,0,0,0,5,121,1,0,0,0,7,123,1,0,0,0,9,126,1,0,0,0,11,128,
        1,0,0,0,13,130,1,0,0,0,15,132,1,0,0,0,17,134,1,0,0,0,19,136,1,0,
        0,0,21,138,1,0,0,0,23,140,1,0,0,0,25,142,1,0,0,0,27,144,1,0,0,0,
        29,146,1,0,0,0,31,148,1,0,0,0,33,151,1,0,0,0,35,154,1,0,0,0,37,156,
        1,0,0,0,39,158,1,0,0,0,41,161,1,0,0,0,43,164,1,0,0,0,45,166,1,0,
        0,0,47,169,1,0,0,0,49,172,1,0,0,0,51,175,1,0,0,0,53,177,1,0,0,0,
        55,180,1,0,0,0,57,189,1,0,0,0,59,191,1,0,0,0,61,197,1,0,0,0,63,202,
        1,0,0,0,65,208,1,0,0,0,67,215,1,0,0,0,69,217,1,0,0,0,71,221,1,0,
        0,0,73,224,1,0,0,0,75,229,1,0,0,0,77,234,1,0,0,0,79,238,1,0,0,0,
        81,261,1,0,0,0,83,263,1,0,0,0,85,284,1,0,0,0,87,286,1,0,0,0,89,293,
        1,0,0,0,91,304,1,0,0,0,93,321,1,0,0,0,95,324,1,0,0,0,97,329,1,0,
        0,0,99,331,1,0,0,0,101,333,1,0,0,0,103,337,1,0,0,0,105,342,1,0,0,
        0,107,349,1,0,0,0,109,354,1,0,0,0,111,357,1,0,0,0,113,362,1,0,0,
        0,115,368,1,0,0,0,117,118,5,59,0,0,118,2,1,0,0,0,119,120,5,123,0,
        0,120,4,1,0,0,0,121,122,5,125,0,0,122,6,1,0,0,0,123,124,5,46,0,0,
        124,125,5,46,0,0,125,8,1,0,0,0,126,127,5,64,0,0,127,10,1,0,0,0,128,
        129,5,61,0,0,129,12,1,0,0,0,130,131,5,91,0,0,131,14,1,0,0,0,132,
        133,5,44,0,0,133,16,1,0,0,0,134,135,5,93,0,0,135,18,1,0,0,0,136,
        137,5,46,0,0,137,20,1,0,0,0,138,139,5,40,0,0,139,22,1,0,0,0,140,
        141,5,41,0,0,141,24,1,0,0,0,142,143,5,58,0,0,143,26,1,0,0,0,144,
        145,5,42,0,0,145,28,1,0,0,0,146,147,5,47,0,0,147,30,1,0,0,0,148,
        149,5,42,0,0,149,150,5,126,0,0,150,32,1,0,0,0,151,152,5,47,0,0,152,
        153,5,126,0,0,153,34,1,0,0,0,154,155,5,43,0,0,155,36,1,0,0,0,156,
        157,5,45,0,0,157,38,1,0,0,0,158,159,5,43,0,0,159,160,5,126,0,0,160,
        40,1,0,0,0,161,162,5,45,0,0,162,163,5,126,0,0,163,42,1,0,0,0,164,
        165,5,37,0,0,165,44,1,0,0,0,166,167,5,61,0,0,167,168,5,61,0,0,168,
        46,1,0,0,0,169,170,5,33,0,0,170,171,5,61,0,0,171,48,1,0,0,0,172,
        173,5,62,0,0,173,174,5,61,0,0,174,50,1,0,0,0,175,176,5,60,0,0,176,
        52,1,0,0,0,177,178,5,60,0,0,178,179,5,61,0,0,179,54,1,0,0,0,180,
        181,5,105,0,0,181,182,5,110,0,0,182,183,5,32,0,0,183,184,5,114,0,
        0,184,185,5,97,0,0,185,186,5,110,0,0,186,187,5,103,0,0,187,188,5,
        101,0,0,188,56,1,0,0,0,189,190,5,39,0,0,190,58,1,0,0,0,191,192,5,
        112,0,0,192,193,5,97,0,0,193,194,5,116,0,0,194,195,5,99,0,0,195,
        196,5,104,0,0,196,60,1,0,0,0,197,198,5,102,0,0,198,199,5,117,0,0,
        199,200,5,110,0,0,200,201,5,99,0,0,201,62,1,0,0,0,202,203,5,98,0,
        0,203,204,5,108,0,0,204,205,5,111,0,0,205,206,5,99,0,0,206,207,5,
        107,0,0,207,64,1,0,0,0,208,209,5,114,0,0,209,210,5,101,0,0,210,211,
        5,116,0,0,211,212,5,117,0,0,212,213,5,114,0,0,213,214,5,110,0,0,
        214,66,1,0,0,0,215,216,5,62,0,0,216,68,1,0,0,0,217,218,5,101,0,0,
        218,219,5,110,0,0,219,220,5,100,0,0,220,70,1,0,0,0,221,222,5,105,
        0,0,222,223,5,102,0,0,223,72,1,0,0,0,224,225,5,101,0,0,225,226,5,
        108,0,0,226,227,5,105,0,0,227,228,5,102,0,0,228,74,1,0,0,0,229,230,
        5,101,0,0,230,231,5,108,0,0,231,232,5,115,0,0,232,233,5,101,0,0,
        233,76,1,0,0,0,234,235,5,102,0,0,235,236,5,111,0,0,236,237,5,114,
        0,0,237,78,1,0,0,0,238,239,5,97,0,0,239,240,5,115,0,0,240,80,1,0,
        0,0,241,242,5,105,0,0,242,243,5,110,0,0,243,244,5,116,0,0,244,262,
        5,110,0,0,245,246,5,102,0,0,246,247,5,108,0,0,247,248,5,111,0,0,
        248,249,5,97,0,0,249,250,5,116,0,0,250,262,5,110,0,0,251,252,5,115,
        0,0,252,253,5,121,0,0,253,254,5,109,0,0,254,255,5,98,0,0,255,256,
        5,111,0,0,256,262,5,108,0,0,257,258,5,108,0,0,258,259,5,105,0,0,
        259,260,5,115,0,0,260,262,5,116,0,0,261,241,1,0,0,0,261,245,1,0,
        0,0,261,251,1,0,0,0,261,257,1,0,0,0,262,82,1,0,0,0,263,265,3,107,
        53,0,264,266,3,101,50,0,265,264,1,0,0,0,266,267,1,0,0,0,267,265,
        1,0,0,0,267,268,1,0,0,0,268,84,1,0,0,0,269,273,3,103,51,0,270,272,
        3,105,52,0,271,270,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,
        1,0,0,0,274,285,1,0,0,0,275,273,1,0,0,0,276,278,3,97,48,0,277,276,
        1,0,0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,282,
        1,0,0,0,281,283,5,126,0,0,282,281,1,0,0,0,282,283,1,0,0,0,283,285,
        1,0,0,0,284,269,1,0,0,0,284,277,1,0,0,0,285,86,1,0,0,0,286,290,5,
        36,0,0,287,289,3,105,52,0,288,287,1,0,0,0,289,292,1,0,0,0,290,288,
        1,0,0,0,290,291,1,0,0,0,291,88,1,0,0,0,292,290,1,0,0,0,293,297,5,
        39,0,0,294,296,3,109,54,0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,
        1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,297,1,0,0,0,300,301,
        5,39,0,0,301,90,1,0,0,0,302,305,3,93,46,0,303,305,3,95,47,0,304,
        302,1,0,0,0,304,303,1,0,0,0,305,92,1,0,0,0,306,308,5,45,0,0,307,
        306,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,313,3,101,50,0,310,
        312,3,99,49,0,311,310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,
        314,1,0,0,0,314,322,1,0,0,0,315,313,1,0,0,0,316,318,5,48,0,0,317,
        316,1,0,0,0,318,319,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,
        322,1,0,0,0,321,307,1,0,0,0,321,317,1,0,0,0,322,94,1,0,0,0,323,325,
        3,93,46,0,324,323,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,327,
        5,46,0,0,327,328,3,93,46,0,328,96,1,0,0,0,329,330,7,0,0,0,330,98,
        1,0,0,0,331,332,7,1,0,0,332,100,1,0,0,0,333,334,7,2,0,0,334,102,
        1,0,0,0,335,338,5,95,0,0,336,338,3,97,48,0,337,335,1,0,0,0,337,336,
        1,0,0,0,338,104,1,0,0,0,339,343,3,97,48,0,340,343,3,99,49,0,341,
        343,5,95,0,0,342,339,1,0,0,0,342,340,1,0,0,0,342,341,1,0,0,0,343,
        106,1,0,0,0,344,345,5,105,0,0,345,350,5,110,0,0,346,347,5,111,0,
        0,347,348,5,117,0,0,348,350,5,116,0,0,349,344,1,0,0,0,349,346,1,
        0,0,0,350,108,1,0,0,0,351,355,3,97,48,0,352,355,3,99,49,0,353,355,
        7,3,0,0,354,351,1,0,0,0,354,352,1,0,0,0,354,353,1,0,0,0,355,110,
        1,0,0,0,356,358,5,13,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,359,
        1,0,0,0,359,360,5,10,0,0,360,112,1,0,0,0,361,363,7,4,0,0,362,361,
        1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,366,
        1,0,0,0,366,367,6,56,0,0,367,114,1,0,0,0,368,372,5,35,0,0,369,371,
        8,5,0,0,370,369,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,
        1,0,0,0,373,375,1,0,0,0,374,372,1,0,0,0,375,376,6,57,0,0,376,116,
        1,0,0,0,22,0,261,267,273,279,282,284,290,297,304,307,313,319,321,
        324,337,342,349,354,357,364,372,1,6,0,0
    ]

class PdawLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    PATCH = 30
    FUNC = 31
    BLOCK = 32
    RETURN = 33
    CONNECT = 34
    END = 35
    IF = 36
    ELIF = 37
    ELSE = 38
    FOR = 39
    AS = 40
    VARTYPE = 41
    IOLET = 42
    NAME = 43
    VARNAME = 44
    SYMBOL = 45
    NUMBER = 46
    INTEGER = 47
    FLOAT = 48
    NL = 49
    WS = 50
    COMMENT = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'{'", "'}'", "'..'", "'@'", "'='", "'['", "','", "']'", 
            "'.'", "'('", "')'", "':'", "'*'", "'/'", "'*~'", "'/~'", "'+'", 
            "'-'", "'+~'", "'-~'", "'%'", "'=='", "'!='", "'>='", "'<'", 
            "'<='", "'in range'", "'''", "'patch'", "'func'", "'block'", 
            "'return'", "'>'", "'end'", "'if'", "'elif'", "'else'", "'for'", 
            "'as'" ]

    symbolicNames = [ "<INVALID>",
            "PATCH", "FUNC", "BLOCK", "RETURN", "CONNECT", "END", "IF", 
            "ELIF", "ELSE", "FOR", "AS", "VARTYPE", "IOLET", "NAME", "VARNAME", 
            "SYMBOL", "NUMBER", "INTEGER", "FLOAT", "NL", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "PATCH", "FUNC", "BLOCK", "RETURN", 
                  "CONNECT", "END", "IF", "ELIF", "ELSE", "FOR", "AS", "VARTYPE", 
                  "IOLET", "NAME", "VARNAME", "SYMBOL", "NUMBER", "INTEGER", 
                  "FLOAT", "LETTER", "DIGIT", "NON_ZERO_DIGIT", "ID_START", 
                  "ID_CONTINUE", "IOLET_START", "SYMBOL_ADMITTED", "NL", 
                  "WS", "COMMENT" ]

    grammarFileName = "Pdaw.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


