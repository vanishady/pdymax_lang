# Generated from Pdaw.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,49,368,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,
        16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,
        21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,
        26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,
        28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
        30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,
        33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,
        36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,
        38,253,8,38,1,39,1,39,4,39,257,8,39,11,39,12,39,258,1,40,1,40,5,
        40,263,8,40,10,40,12,40,266,9,40,1,40,4,40,269,8,40,11,40,12,40,
        270,1,40,3,40,274,8,40,3,40,276,8,40,1,41,1,41,5,41,280,8,41,10,
        41,12,41,283,9,41,1,42,1,42,5,42,287,8,42,10,42,12,42,290,9,42,1,
        42,1,42,1,43,1,43,3,43,296,8,43,1,44,3,44,299,8,44,1,44,1,44,5,44,
        303,8,44,10,44,12,44,306,9,44,1,44,4,44,309,8,44,11,44,12,44,310,
        3,44,313,8,44,1,45,3,45,316,8,45,1,45,1,45,1,45,1,46,1,46,1,47,1,
        47,1,48,1,48,1,49,1,49,3,49,329,8,49,1,50,1,50,1,50,3,50,334,8,50,
        1,51,1,51,1,51,1,51,1,51,3,51,341,8,51,1,52,1,52,1,52,3,52,346,8,
        52,1,53,3,53,349,8,53,1,53,1,53,1,54,4,54,354,8,54,11,54,12,54,355,
        1,54,1,54,1,55,1,55,5,55,362,8,55,10,55,12,55,365,9,55,1,55,1,55,
        0,0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
        69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
        91,46,93,0,95,0,97,0,99,0,101,0,103,0,105,0,107,47,109,48,111,49,
        1,0,6,2,0,65,90,97,122,1,0,48,57,1,0,49,57,4,0,44,44,46,47,92,92,
        95,95,2,0,9,9,32,32,2,0,10,10,13,13,385,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,107,1,0,0,0,
        0,109,1,0,0,0,0,111,1,0,0,0,1,113,1,0,0,0,3,115,1,0,0,0,5,117,1,
        0,0,0,7,119,1,0,0,0,9,122,1,0,0,0,11,124,1,0,0,0,13,126,1,0,0,0,
        15,128,1,0,0,0,17,130,1,0,0,0,19,132,1,0,0,0,21,134,1,0,0,0,23,136,
        1,0,0,0,25,138,1,0,0,0,27,140,1,0,0,0,29,142,1,0,0,0,31,144,1,0,
        0,0,33,147,1,0,0,0,35,150,1,0,0,0,37,152,1,0,0,0,39,154,1,0,0,0,
        41,157,1,0,0,0,43,160,1,0,0,0,45,162,1,0,0,0,47,165,1,0,0,0,49,168,
        1,0,0,0,51,171,1,0,0,0,53,173,1,0,0,0,55,176,1,0,0,0,57,185,1,0,
        0,0,59,191,1,0,0,0,61,196,1,0,0,0,63,202,1,0,0,0,65,209,1,0,0,0,
        67,211,1,0,0,0,69,215,1,0,0,0,71,218,1,0,0,0,73,223,1,0,0,0,75,228,
        1,0,0,0,77,252,1,0,0,0,79,254,1,0,0,0,81,275,1,0,0,0,83,277,1,0,
        0,0,85,284,1,0,0,0,87,295,1,0,0,0,89,312,1,0,0,0,91,315,1,0,0,0,
        93,320,1,0,0,0,95,322,1,0,0,0,97,324,1,0,0,0,99,328,1,0,0,0,101,
        333,1,0,0,0,103,340,1,0,0,0,105,345,1,0,0,0,107,348,1,0,0,0,109,
        353,1,0,0,0,111,359,1,0,0,0,113,114,5,59,0,0,114,2,1,0,0,0,115,116,
        5,123,0,0,116,4,1,0,0,0,117,118,5,125,0,0,118,6,1,0,0,0,119,120,
        5,46,0,0,120,121,5,46,0,0,121,8,1,0,0,0,122,123,5,64,0,0,123,10,
        1,0,0,0,124,125,5,61,0,0,125,12,1,0,0,0,126,127,5,91,0,0,127,14,
        1,0,0,0,128,129,5,44,0,0,129,16,1,0,0,0,130,131,5,93,0,0,131,18,
        1,0,0,0,132,133,5,46,0,0,133,20,1,0,0,0,134,135,5,40,0,0,135,22,
        1,0,0,0,136,137,5,41,0,0,137,24,1,0,0,0,138,139,5,58,0,0,139,26,
        1,0,0,0,140,141,5,42,0,0,141,28,1,0,0,0,142,143,5,47,0,0,143,30,
        1,0,0,0,144,145,5,42,0,0,145,146,5,126,0,0,146,32,1,0,0,0,147,148,
        5,47,0,0,148,149,5,126,0,0,149,34,1,0,0,0,150,151,5,43,0,0,151,36,
        1,0,0,0,152,153,5,45,0,0,153,38,1,0,0,0,154,155,5,43,0,0,155,156,
        5,126,0,0,156,40,1,0,0,0,157,158,5,45,0,0,158,159,5,126,0,0,159,
        42,1,0,0,0,160,161,5,37,0,0,161,44,1,0,0,0,162,163,5,61,0,0,163,
        164,5,61,0,0,164,46,1,0,0,0,165,166,5,33,0,0,166,167,5,61,0,0,167,
        48,1,0,0,0,168,169,5,62,0,0,169,170,5,61,0,0,170,50,1,0,0,0,171,
        172,5,60,0,0,172,52,1,0,0,0,173,174,5,60,0,0,174,175,5,61,0,0,175,
        54,1,0,0,0,176,177,5,105,0,0,177,178,5,110,0,0,178,179,5,32,0,0,
        179,180,5,114,0,0,180,181,5,97,0,0,181,182,5,110,0,0,182,183,5,103,
        0,0,183,184,5,101,0,0,184,56,1,0,0,0,185,186,5,112,0,0,186,187,5,
        97,0,0,187,188,5,116,0,0,188,189,5,99,0,0,189,190,5,104,0,0,190,
        58,1,0,0,0,191,192,5,102,0,0,192,193,5,117,0,0,193,194,5,110,0,0,
        194,195,5,99,0,0,195,60,1,0,0,0,196,197,5,98,0,0,197,198,5,108,0,
        0,198,199,5,111,0,0,199,200,5,99,0,0,200,201,5,107,0,0,201,62,1,
        0,0,0,202,203,5,114,0,0,203,204,5,101,0,0,204,205,5,116,0,0,205,
        206,5,117,0,0,206,207,5,114,0,0,207,208,5,110,0,0,208,64,1,0,0,0,
        209,210,5,62,0,0,210,66,1,0,0,0,211,212,5,101,0,0,212,213,5,110,
        0,0,213,214,5,100,0,0,214,68,1,0,0,0,215,216,5,105,0,0,216,217,5,
        102,0,0,217,70,1,0,0,0,218,219,5,101,0,0,219,220,5,108,0,0,220,221,
        5,105,0,0,221,222,5,102,0,0,222,72,1,0,0,0,223,224,5,101,0,0,224,
        225,5,108,0,0,225,226,5,115,0,0,226,227,5,101,0,0,227,74,1,0,0,0,
        228,229,5,102,0,0,229,230,5,111,0,0,230,231,5,114,0,0,231,76,1,0,
        0,0,232,233,5,105,0,0,233,234,5,110,0,0,234,235,5,116,0,0,235,253,
        5,110,0,0,236,237,5,102,0,0,237,238,5,108,0,0,238,239,5,111,0,0,
        239,240,5,97,0,0,240,241,5,116,0,0,241,253,5,110,0,0,242,243,5,115,
        0,0,243,244,5,121,0,0,244,245,5,109,0,0,245,246,5,98,0,0,246,247,
        5,111,0,0,247,253,5,108,0,0,248,249,5,110,0,0,249,250,5,111,0,0,
        250,251,5,100,0,0,251,253,5,101,0,0,252,232,1,0,0,0,252,236,1,0,
        0,0,252,242,1,0,0,0,252,248,1,0,0,0,253,78,1,0,0,0,254,256,3,103,
        51,0,255,257,3,97,48,0,256,255,1,0,0,0,257,258,1,0,0,0,258,256,1,
        0,0,0,258,259,1,0,0,0,259,80,1,0,0,0,260,264,3,99,49,0,261,263,3,
        101,50,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,
        1,0,0,0,265,276,1,0,0,0,266,264,1,0,0,0,267,269,3,93,46,0,268,267,
        1,0,0,0,269,270,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,273,
        1,0,0,0,272,274,5,126,0,0,273,272,1,0,0,0,273,274,1,0,0,0,274,276,
        1,0,0,0,275,260,1,0,0,0,275,268,1,0,0,0,276,82,1,0,0,0,277,281,5,
        36,0,0,278,280,3,101,50,0,279,278,1,0,0,0,280,283,1,0,0,0,281,279,
        1,0,0,0,281,282,1,0,0,0,282,84,1,0,0,0,283,281,1,0,0,0,284,288,5,
        39,0,0,285,287,3,105,52,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,
        1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,288,1,0,0,0,291,292,
        5,39,0,0,292,86,1,0,0,0,293,296,3,89,44,0,294,296,3,91,45,0,295,
        293,1,0,0,0,295,294,1,0,0,0,296,88,1,0,0,0,297,299,5,45,0,0,298,
        297,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,304,3,97,48,0,301,
        303,3,95,47,0,302,301,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,
        305,1,0,0,0,305,313,1,0,0,0,306,304,1,0,0,0,307,309,5,48,0,0,308,
        307,1,0,0,0,309,310,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,
        313,1,0,0,0,312,298,1,0,0,0,312,308,1,0,0,0,313,90,1,0,0,0,314,316,
        3,89,44,0,315,314,1,0,0,0,315,316,1,0,0,0,316,317,1,0,0,0,317,318,
        5,46,0,0,318,319,3,89,44,0,319,92,1,0,0,0,320,321,7,0,0,0,321,94,
        1,0,0,0,322,323,7,1,0,0,323,96,1,0,0,0,324,325,7,2,0,0,325,98,1,
        0,0,0,326,329,5,95,0,0,327,329,3,93,46,0,328,326,1,0,0,0,328,327,
        1,0,0,0,329,100,1,0,0,0,330,334,3,93,46,0,331,334,3,95,47,0,332,
        334,5,95,0,0,333,330,1,0,0,0,333,331,1,0,0,0,333,332,1,0,0,0,334,
        102,1,0,0,0,335,336,5,105,0,0,336,341,5,110,0,0,337,338,5,111,0,
        0,338,339,5,117,0,0,339,341,5,116,0,0,340,335,1,0,0,0,340,337,1,
        0,0,0,341,104,1,0,0,0,342,346,3,93,46,0,343,346,3,95,47,0,344,346,
        7,3,0,0,345,342,1,0,0,0,345,343,1,0,0,0,345,344,1,0,0,0,346,106,
        1,0,0,0,347,349,5,13,0,0,348,347,1,0,0,0,348,349,1,0,0,0,349,350,
        1,0,0,0,350,351,5,10,0,0,351,108,1,0,0,0,352,354,7,4,0,0,353,352,
        1,0,0,0,354,355,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,357,
        1,0,0,0,357,358,6,54,0,0,358,110,1,0,0,0,359,363,5,35,0,0,360,362,
        8,5,0,0,361,360,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,
        1,0,0,0,364,366,1,0,0,0,365,363,1,0,0,0,366,367,6,55,0,0,367,112,
        1,0,0,0,22,0,252,258,264,270,273,275,281,288,295,298,304,310,312,
        315,328,333,340,345,348,355,363,1,6,0,0
    ]

class PdawLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    PATCH = 29
    FUNC = 30
    BLOCK = 31
    RETURN = 32
    CONNECT = 33
    END = 34
    IF = 35
    ELIF = 36
    ELSE = 37
    FOR = 38
    VARTYPE = 39
    IOLET = 40
    NAME = 41
    VARNAME = 42
    SYMBOL = 43
    NUMBER = 44
    INTEGER = 45
    FLOAT = 46
    NL = 47
    WS = 48
    COMMENT = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'{'", "'}'", "'..'", "'@'", "'='", "'['", "','", "']'", 
            "'.'", "'('", "')'", "':'", "'*'", "'/'", "'*~'", "'/~'", "'+'", 
            "'-'", "'+~'", "'-~'", "'%'", "'=='", "'!='", "'>='", "'<'", 
            "'<='", "'in range'", "'patch'", "'func'", "'block'", "'return'", 
            "'>'", "'end'", "'if'", "'elif'", "'else'", "'for'" ]

    symbolicNames = [ "<INVALID>",
            "PATCH", "FUNC", "BLOCK", "RETURN", "CONNECT", "END", "IF", 
            "ELIF", "ELSE", "FOR", "VARTYPE", "IOLET", "NAME", "VARNAME", 
            "SYMBOL", "NUMBER", "INTEGER", "FLOAT", "NL", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "PATCH", "FUNC", "BLOCK", "RETURN", 
                  "CONNECT", "END", "IF", "ELIF", "ELSE", "FOR", "VARTYPE", 
                  "IOLET", "NAME", "VARNAME", "SYMBOL", "NUMBER", "INTEGER", 
                  "FLOAT", "LETTER", "DIGIT", "NON_ZERO_DIGIT", "ID_START", 
                  "ID_CONTINUE", "IOLET_START", "SYMBOL_ADMITTED", "NL", 
                  "WS", "COMMENT" ]

    grammarFileName = "Pdaw.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


