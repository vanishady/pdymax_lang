Pdaw è un DSL che compila verso Pure Data e Max.

/*/*/*/*/*/*/ Dettagli tecnici per l'installazione del DSL /*/*/*/*/*/*/

Perché la transpilazione di un file in input scritto con la sintassi del DSL vada a buon fine, è necessario avere i seguenti prerequisiti:
- {Python} 3.8 o successivo
- {PureData} 0.53-2 o successivo
- {Max} 7.0 o successivo

Affinché sia garantita la compatibilità da Max a PureData, si raccomanta l'installazione della libreria cyclone [https://github.com/porres/pd-cyclone], mentre la compatibilità da Pure Data verso Max è garantita dalla presenza di oggetti Max creati appositamente per wrappare nodi Pure Data [../wrapped].

Per procedere con la transpilazione di un file in input, è necessario eseguire il file <main.py> e selezionare il file da transpilare. Verranno automaticamente create le patch corrispondenti in formato .pd e .maxpat, visibili nella cartella <outputs> [../outputs].

Il DSL è disponibile nella repository GitHub [https://github.com/mapio-teaching/TESI-Coccoli-Veronica], di cui si raccomanda l'installazione.

/*/*/*/*/*/*/ puredata /*/*/*/*/*/*/

Pure Data e Max sono ambienti di programmazione con interfaccia grafica per il processing 
di audio in real-time, il primo open-source, l'altro no. Consistono essenzialmente di *nodi* e *connessioni*. 
Ad esempio, una patch base in Pure Data potrebbe essere costituita da un nodo oscillatore,
un nodo per l'output audio e una connessione tra i due.

Le connessioni sono di due tipi: *control* e *signal*, e in PureData la differenza 
è visibile dalla comparsa o meno del simbolo '~' nel nome del nodo.

Ciascun nodo può avere in generale più inlet e outlet (ganci a cui arrivano o da
cui partono le connessioni). Il valore di un nodo si aggiorna quando riceve un
messaggio in uno dei suoi inlet.

Pure Data presenta un gran numero di nodi built-in, oltre che nodi 'externals'
condivisi dalla community.


/*/*/*/*/*/*/ obiettivi /*/*/*/*/*/*/

- **programmazione da interfaccia testuale e non grafica**
- **ordine**: strutturare una patch puredata in maniera ordinata grazie all'uso delle 
  subpatch (implementate come blocchi nel DSL)
- **riutilizzo del codice**: non è raro dover copiare grandi set di nodi in puredata.
  Pdaw tiene conto di questa necessità utilizzando blocchi che raggruppano insiemi
  di nodi, e che possono essere richiamati nel codice. 
- **daw-like**: al momento non esiste una libreria standard di pdaw, ma l'obiettivo 
  è permettere (tramite import) di richiamare blocchi standard quali @clock,
  @drums, @synth ... in modo da avere un ambiente di lavoro simile a quello 
  di una digital audio workstation.
- **linguaggio semplice senza perdite di features**: fornire un linguaggio di 
  programmazione semplice e intuitivo, che permetta di esprimere tutto ciò che è 
  esprimibile anche attraverso l'interfaccia grafica di puredata.
 

/*/*/*/*/*/*/ grammatica /*/*/*/*/*/*/

###PATCH

#il nome della patch dà il nome al file .pd
patch nomepatch


###BLOCCHI 

#il blocco è una subpatch di Pd o Max
#tutte le variabili dichiarate nel blocco sono nel suo scope locale

block nomeblock (param1:type, param2:type ...) {
}

#il blocco viene richiamato con una call
@nomeblock(param1, param2, ...)

###VARIABILI SEMPLICI

#le variabili possono essere floatn (float), intn (interi), symbol (stringhe),
#list (liste) se sono variabili semplici, altrimenti sono nodi

#le variabili semplici non hanno un corrispettivo nell'interfaccia di Pd e Max,
#se non come argomento dei nodi.

#dichiarazione e assegnamento sono simultanei
nomevar1 = 1
nomevar = 'pippo'
nomevar = 30/$nomevar1
nomevar = @funzionecheritornanum()
nomevar = [1,2,3] #una lista può essere di interi, float, symbol, nodi o un mix
nomevar = lista[0] 


###NODI 

#un nodo può essere dichiarato in più modi
nodename = dac~(param1, param2, ...) #con parametri
nodename = dac~() #senza parametri

#dichiarazione senza nome della variabile
#viene assegnato comunque un id implicito
#per l'utente poi non è possibile riferirsi a quel nodo
obj(param1, param2, ...)
num(param1, param2, ...)

#l'unica particolarità a cui prestare attenzione è il nodo oggetto semplice
#se voglio un nodo object con valore 10, non devo dichiarare
nodename = 10, perché sarebbe una variabile standard e non node, ma piuttosto
nodename = obj(10) 

#dichiarazione veloce per nodi che specificano operazioni
#di default questi nodi hanno nodetype obj
nodename = *(5)
nodename = *~(5)
*(5)
*~(5)

###CONNESSIONI

#le connessioni sono arbitrariamente lunghe
#il modo standard per effettuare connessioni è
nodename > anothernode

#connessione con dichiarazione al volo
nodename > numnode=obj(8)

#connessioni multiple
[nodename1, nodename2] > nodename3
num() > [nodename1, nodename2, node3=obj(param, ...)] > nodename4


###INLET E OUTLET

#posso specificare outlet e inlet in una connessione
#di default in una connessione si agganciano outlet e inlet 1, pd-like
m = metro()
m:2 > bang() #è come scrivere
m:2 > 1:bang()

#anche nelle connessioni multiple è possibile specificare inlet e outlet
floatatom > [2:nodename1, nodename2:2, node3=obj(param, ...)] > 2:nodename4


###COSTRUTTI IF-ELIF-ELSE, FOR

#sono python-like
#la test condition è un'operazione di confronto
#supportano pass, break, continue


###FUNZIONI

#le funzioni servono alla manipolazione di dati semplici e nodi nel loro scope locale, e ritornano opzionalmente un valore 
#i tipi accettati sono intn,floatn,list,symbol,node
func nomefunc (param1:type, param2:type ...) {
 	[ ...]
	return var
}

#la funzione è chiamata in una call
@nomefunc(param1, param2, ...)


