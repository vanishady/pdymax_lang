patch nihil

func bind(n1:node, n2:node, iolets:intn) {

	for i in range iolets:
		n1:(i+1) > (i+1):n2
	end
}

func onetoall (n1:node, n2:node, iolets:intn) {
	for i in range iolets:
		n1 > (i+1):n2
	end
}

func midikeys (start_note:intn, modo:symbol) {
	if modo == 'dorian':
		intervals = [2,1,2,2,2,1,2]
	elif modo == 'phrygian':
	     intervals = [1,2,2,2,1,2,2]
	elif modo == 'lydian':
		intervals = [2,2,2,1,2,2,1]
	elif modo == 'mixolydian':
		intervals = [2,2,1,2,2,1,2]
	elif modo == 'aeolian':
		intervals = [2,1,2,2,1,2,2]
	elif modo == 'locrian':
		intervals = [1,2,2,1,2,2,2]
	elif modo == 'minor_pentatonic':
		intervals = [3,2,2,3,2]
	elif modo == 'major_pentatonic':
		intervals = [2,2,3,2,3]
	elif modo == 'minor_blues':
		intervals = [3,2,1,1,3,2]
	elif modo == 'major_blues':
		intervals = [2,1,1,3,2,3]
	elif modo=='melodic_minor':
		intervals = [2, 1, 2, 2, 2, 2, 1]
	elif modo=='harmonic_minor':
		intervals = [2, 1, 2, 2, 1, 3, 1]
	elif modo=='natural_minor':
		intervals = [2, 1, 2, 2, 1, 2, 2]
	elif modo=='natural_major':
		intervals = [2,2,1,2,2,2,1]
	end

	res = []
	for i in range @len(intervals):
		@append(res, start_note+intervals[i])
		start_note = start_note+intervals[i]
	end
	
	return res
}

func dsp_on() {
	return msg('\;', 'pd', 'dsp', 1)
}

func dsp_off() {
	return msg('\;', 'pd', 'dsp', 0)
}

block read (name:symbol) {
	inlet() > msg('open', name, '\,', 1) > r=readsf~() > outlet~()
}

block bpm (bpm:intn) {
	div = /()
	tbf = tbf()
	loadbang() > msg(bpm) > num() > tbf:2 > 2:div
	tbf > div 
	loadbang() > msg(60000) > div > num() > s('4th_time')
}

block bpm_out() {
	div = /()
	tbf = tbf()
	inlet() > num() > tbf:2 > 2:div
	tbf > div 
	loadbang() > msg(60000) > div > num() > s('4th_time')
}

block on_off() {
	toggle() > s('ON')
}

block onoff() {
	inlet() > s('ON')
}


block readmore(samples:list) {
	inlet() > initnum=num() 
	finalout = outlet~()
	for i in range @len(samples):
		if i==@len(samples):
			break
		end
		initnum>sel(i)>bang()>@read(samples[i])>finalout
	end
}

block attachprobability(prob:intn) {
	r('4bars_pattern')> bang()> random(100)> num()> obj('<',prob)> outlet()
}


block sampleread (sample:symbol, name:symbol) {
	inlet() > bang() > @read(sample) > send~(name)
}


#SEQUENCERS

block drums (seq:list, sample:symbol, name:symbol) {
	commonbang = bang()
	readsample = @read(sample)

	for i in range @len(seq):
		inlet() > bang() > s = spigot() > readsample
		if seq[i]==1:
			loadbang() > toggle() > 2:s
		else:
			toggle() > 2:s
		end
	end

	readsample > send~(name)
		
}

block gendrums(samples:list, seqlen:intn, name:symbol) {

	common_num = num()

	for i in range seqlen:
		inlet()>bang()> curr=msg() >common_num
		r('4bars_pattern')>bang()>random(@len(samples))>msg('set', '\$1')>curr
	end
	
	common_num > @readmore(samples) >  send~(name)
}

block genbass(probs:list, startnote:intn, scale:symbol, name:symbol) {
	common_num = num()
	synth = @ac_bass()
	common_num > synth > send~(name)

	for i in range @len(probs):
		inlet() > bang() > s = spigot() > bang() > note=num() > common_num
		@attachprobability(probs[i]) > toggle() > 2:s
		res = @midikeys(startnote, scale)
		mel = @scales(res)
		r('4bars_pattern') > mel > note
	end
}

#CLOCKS

block clockdiv(time:intn) {
	divtime = time / 4
	metro = metro()

	receive('4th_time') > /(divtime) > num() > 2:metro
	r('ON')>t = toggle()>1:metro

	t > s0 = sel(0)
	[loadbang(), s0] > bang() > msg(-1) > int_node=int(1)

	metro>bang()>int_node>num()>%(time)>+(1)>n = num()
	int_node>plus_one=+(1)
	plus_one>2:int_node

	sel_list = []
	for i in range time:
		@append(sel_list, i+1)
	end

	n > finalsel = sel(sel_list)
	
	for i in range time:
		finalsel:(i+1) > bang() > outlet()
	end
}

block clockmul (time:intn, sendto:symbol) {
	r('ON')>toggle()>m=metro()>bang()>outlet()
	r('4th_time')>mul=*(time*4)>2:m
	if sendto!='none':
		mul>send(sendto)
	end
}

#takes patternlength in bars. bangs out each <patlen> bars.
block genpatternof(patlen:intn) {
	metro = metro()

	receive('4th_time') > num() > 2:metro
	r('ON')>t = toggle()>1:metro

	t > s0 = sel(0)
	[loadbang(), s0] > bang() > msg(-1) > int_node=int(1)

	metro>bang()>int_node>n=num()
	int_node>plus_one=+(1)
	plus_one>2:int_node

	if patlen == 4: 
		sendout = '4bars_pattern'
	elif patlen == 2:
		sendout = '2bars_pattern'
	elif patlen == 1:
		sendout = '1bar_pattern'
	end
	n>%(4*patlen)>+(1)>num()>sel(1)>bang()>send(sendout)
}

#MIXER

block basicmixer(names:list, vols:list) {
	final = dac~()
	hook = *~(1)
	for i in range @len(vols):
		receive~(names[i]) > *~(vols[i]) > hook
	end
	hook > [1:final, 2:final]

}

block glitchonoff(selwhat:intn, sx:symbol, dx:symbol) {
	r('glitch_onoff')>toggle()>s = sel(selwhat)> m1=msg(sx,'50')
	s:2 > m2=msg(dx,'50')
	[m1, m2] > line() > num() > outlet()
}

block glitchmix (toglitch:list, notglitch:list, glitchsample:symbol) {

	mul75=*~(0.75)

	bang()>@read(glitchsample)>mul75
	for i in range @len(toglitch):
		receive~(toglitch[i])>mul75
	end
	mul75 > mul=*~(0.25) > mul1_1=*~(1)
	@glitchonoff(1,'0','1')>2:mul

	[mul, mul1=*~(1)]>delwrite~('glitch', 500)
	r('glitch_value')>nn=num()>delread=delread~('glitch', 50)>mul25=*~(0.25)>mul1_1>*~(0.7)>mul111=*~(1)
	delread>mul1
	@glitchonoff(0,'0','1')>2:mul1
	@glitchonoff(1,'1','0')>2:mul25
	r('glitch_onoff')>bang()>random(100)>+(10)>[s('random_glitch'),nn]
	out=dac~()
	for i in range @len(notglitch):
		receive~(notglitch[i])>mul111
	end
	mul111>[1:out, 2:out]
}

#SYNTHEZISERS

block additivesynth (freq: intn, armonics: list, volumes: list) {

	if freq == 0:
		inlet() > freq_node = num()
	else:
		inlet() > msg(freq) > freq_node = num()
	end
	freq_node > osc~() > finalvol = *~ (0.25) > outlet~()

	for i in range @len(armonics):
		freq_node > * (armonics[i]) > num() > osc~() > *~ (volumes[i]) > finalvol
	end
}

block ambient (startnote:intn, scale:symbol, name:symbol) {
	inlet() > [b1=bang(), b2=bang()]

	res = @midikeys(startnote, scale)
	mel = @scales(res)
	b1 > mel > n=num()
	n > /(2)>num()>phasor~()>lop=lop~(100)
	n > phasor~() >lop
	n > *(1.001) > num() > phasor~() >lop
	lop > mul=*~() > *~(0.5) > send~(name)

	b2 > msg('1','200') > line=line()
	b2 > del=delay() > temp=msg('0','500') > line
	r('2_mes_time')>num()>-(500)>2:del
	r('ON')>sel(0)>delay(5)>temp
	line > 2:mul
}

block ac_bass() {
	inlet() > mtof=num()
	mtof> phasor~() > send~('saw_bass')
	mtof>b1=bang()>msg('1','10')>l1=line()>num()>*(4000)>+(500)>num()>s('filter_freq')
	b1>delay(10)>msg('0','250')>l1

	ff=[9,25]
	mul=*~()
	for i in range 2:
		vcf = vcf~()
		loadbang()>msg(ff[i])>3:vcf
		receive~('saw_bass')>1:vcf
		r('filter_freq')>2:vcf
		vcf>mul
	end

	mtof>b1=bang()>msg('1','10')>l1=line()>num()>2:mul>outlet~()
	b1>delay(10)>msg('0','250')>l1	
}

#ENVELOPES

block adsr (attack:intn, decay:intn, sus_lev: floatn, sustain: intn, release:intn) {
	bucket = line~()
	inlet() > msg(1, 1000) > bucket
	inlet() > delay(1000) > bang() > [mess = msg(0.5, 1500), del = delay(3000)]
	del > msg(0, 1000) > bucket
	mess > bucket > outlet~()
}

#OTHERS

block scales(keys:list) {
	numin = num()
	numout = num()
	inlet() > bang() > random(@len(keys)) > numin 
	for i in range @len(keys):
		numin > sel(i) > msg(keys[i]) > numout
	end
	numout > mtof() > outlet()
}

;