# Generated from Pdaw.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,370,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,1,1,1,1,2,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,
        16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,
        21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,
        28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,
        30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,
        36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,260,8,39,1,40,1,40,4,40,264,
        8,40,11,40,12,40,265,1,41,1,41,5,41,270,8,41,10,41,12,41,273,9,41,
        1,41,4,41,276,8,41,11,41,12,41,277,1,41,3,41,281,8,41,3,41,283,8,
        41,1,42,1,42,5,42,287,8,42,10,42,12,42,290,9,42,1,43,1,43,5,43,294,
        8,43,10,43,12,43,297,9,43,1,43,1,43,1,44,1,44,3,44,303,8,44,1,45,
        3,45,306,8,45,1,45,1,45,5,45,310,8,45,10,45,12,45,313,9,45,1,45,
        4,45,316,8,45,11,45,12,45,317,3,45,320,8,45,1,46,3,46,323,8,46,1,
        46,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,3,50,336,8,
        50,1,51,1,51,1,51,3,51,341,8,51,1,52,1,52,1,52,1,52,1,52,3,52,348,
        8,52,1,53,3,53,351,8,53,1,53,1,53,1,54,4,54,356,8,54,11,54,12,54,
        357,1,54,1,54,1,55,1,55,5,55,364,8,55,10,55,12,55,367,9,55,1,55,
        1,55,0,0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
        89,45,91,46,93,47,95,0,97,0,99,0,101,0,103,0,105,0,107,48,109,49,
        111,50,1,0,5,2,0,65,90,97,122,1,0,48,57,1,0,49,57,2,0,9,9,32,32,
        2,0,10,10,13,13,386,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
        0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
        0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
        0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,107,1,0,0,0,0,109,1,
        0,0,0,0,111,1,0,0,0,1,113,1,0,0,0,3,115,1,0,0,0,5,117,1,0,0,0,7,
        120,1,0,0,0,9,122,1,0,0,0,11,124,1,0,0,0,13,126,1,0,0,0,15,128,1,
        0,0,0,17,130,1,0,0,0,19,132,1,0,0,0,21,134,1,0,0,0,23,136,1,0,0,
        0,25,138,1,0,0,0,27,140,1,0,0,0,29,142,1,0,0,0,31,145,1,0,0,0,33,
        148,1,0,0,0,35,150,1,0,0,0,37,152,1,0,0,0,39,155,1,0,0,0,41,158,
        1,0,0,0,43,160,1,0,0,0,45,163,1,0,0,0,47,166,1,0,0,0,49,169,1,0,
        0,0,51,171,1,0,0,0,53,174,1,0,0,0,55,183,1,0,0,0,57,185,1,0,0,0,
        59,192,1,0,0,0,61,198,1,0,0,0,63,203,1,0,0,0,65,209,1,0,0,0,67,216,
        1,0,0,0,69,218,1,0,0,0,71,222,1,0,0,0,73,225,1,0,0,0,75,230,1,0,
        0,0,77,235,1,0,0,0,79,259,1,0,0,0,81,261,1,0,0,0,83,282,1,0,0,0,
        85,284,1,0,0,0,87,291,1,0,0,0,89,302,1,0,0,0,91,319,1,0,0,0,93,322,
        1,0,0,0,95,327,1,0,0,0,97,329,1,0,0,0,99,331,1,0,0,0,101,335,1,0,
        0,0,103,340,1,0,0,0,105,347,1,0,0,0,107,350,1,0,0,0,109,355,1,0,
        0,0,111,361,1,0,0,0,113,114,5,59,0,0,114,2,1,0,0,0,115,116,5,123,
        0,0,116,4,1,0,0,0,117,118,5,46,0,0,118,119,5,46,0,0,119,6,1,0,0,
        0,120,121,5,64,0,0,121,8,1,0,0,0,122,123,5,61,0,0,123,10,1,0,0,0,
        124,125,5,91,0,0,125,12,1,0,0,0,126,127,5,44,0,0,127,14,1,0,0,0,
        128,129,5,93,0,0,129,16,1,0,0,0,130,131,5,46,0,0,131,18,1,0,0,0,
        132,133,5,40,0,0,133,20,1,0,0,0,134,135,5,41,0,0,135,22,1,0,0,0,
        136,137,5,58,0,0,137,24,1,0,0,0,138,139,5,42,0,0,139,26,1,0,0,0,
        140,141,5,47,0,0,141,28,1,0,0,0,142,143,5,42,0,0,143,144,5,126,0,
        0,144,30,1,0,0,0,145,146,5,47,0,0,146,147,5,126,0,0,147,32,1,0,0,
        0,148,149,5,43,0,0,149,34,1,0,0,0,150,151,5,45,0,0,151,36,1,0,0,
        0,152,153,5,43,0,0,153,154,5,126,0,0,154,38,1,0,0,0,155,156,5,45,
        0,0,156,157,5,126,0,0,157,40,1,0,0,0,158,159,5,37,0,0,159,42,1,0,
        0,0,160,161,5,61,0,0,161,162,5,61,0,0,162,44,1,0,0,0,163,164,5,33,
        0,0,164,165,5,61,0,0,165,46,1,0,0,0,166,167,5,62,0,0,167,168,5,61,
        0,0,168,48,1,0,0,0,169,170,5,60,0,0,170,50,1,0,0,0,171,172,5,60,
        0,0,172,173,5,61,0,0,173,52,1,0,0,0,174,175,5,105,0,0,175,176,5,
        110,0,0,176,177,5,32,0,0,177,178,5,114,0,0,178,179,5,97,0,0,179,
        180,5,110,0,0,180,181,5,103,0,0,181,182,5,101,0,0,182,54,1,0,0,0,
        183,184,5,125,0,0,184,56,1,0,0,0,185,186,5,105,0,0,186,187,5,109,
        0,0,187,188,5,112,0,0,188,189,5,111,0,0,189,190,5,114,0,0,190,191,
        5,116,0,0,191,58,1,0,0,0,192,193,5,112,0,0,193,194,5,97,0,0,194,
        195,5,116,0,0,195,196,5,99,0,0,196,197,5,104,0,0,197,60,1,0,0,0,
        198,199,5,102,0,0,199,200,5,117,0,0,200,201,5,110,0,0,201,202,5,
        99,0,0,202,62,1,0,0,0,203,204,5,98,0,0,204,205,5,108,0,0,205,206,
        5,111,0,0,206,207,5,99,0,0,207,208,5,107,0,0,208,64,1,0,0,0,209,
        210,5,114,0,0,210,211,5,101,0,0,211,212,5,116,0,0,212,213,5,117,
        0,0,213,214,5,114,0,0,214,215,5,110,0,0,215,66,1,0,0,0,216,217,5,
        62,0,0,217,68,1,0,0,0,218,219,5,101,0,0,219,220,5,110,0,0,220,221,
        5,100,0,0,221,70,1,0,0,0,222,223,5,105,0,0,223,224,5,102,0,0,224,
        72,1,0,0,0,225,226,5,101,0,0,226,227,5,108,0,0,227,228,5,105,0,0,
        228,229,5,102,0,0,229,74,1,0,0,0,230,231,5,101,0,0,231,232,5,108,
        0,0,232,233,5,115,0,0,233,234,5,101,0,0,234,76,1,0,0,0,235,236,5,
        102,0,0,236,237,5,111,0,0,237,238,5,114,0,0,238,78,1,0,0,0,239,240,
        5,105,0,0,240,241,5,110,0,0,241,242,5,116,0,0,242,260,5,110,0,0,
        243,244,5,102,0,0,244,245,5,108,0,0,245,246,5,111,0,0,246,247,5,
        97,0,0,247,248,5,116,0,0,248,260,5,110,0,0,249,250,5,115,0,0,250,
        251,5,121,0,0,251,252,5,109,0,0,252,253,5,98,0,0,253,254,5,111,0,
        0,254,260,5,108,0,0,255,256,5,110,0,0,256,257,5,111,0,0,257,258,
        5,100,0,0,258,260,5,101,0,0,259,239,1,0,0,0,259,243,1,0,0,0,259,
        249,1,0,0,0,259,255,1,0,0,0,260,80,1,0,0,0,261,263,3,105,52,0,262,
        264,3,99,49,0,263,262,1,0,0,0,264,265,1,0,0,0,265,263,1,0,0,0,265,
        266,1,0,0,0,266,82,1,0,0,0,267,271,3,101,50,0,268,270,3,103,51,0,
        269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,
        272,283,1,0,0,0,273,271,1,0,0,0,274,276,3,95,47,0,275,274,1,0,0,
        0,276,277,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,280,1,0,0,
        0,279,281,5,126,0,0,280,279,1,0,0,0,280,281,1,0,0,0,281,283,1,0,
        0,0,282,267,1,0,0,0,282,275,1,0,0,0,283,84,1,0,0,0,284,288,5,36,
        0,0,285,287,3,103,51,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,1,
        0,0,0,288,289,1,0,0,0,289,86,1,0,0,0,290,288,1,0,0,0,291,295,5,39,
        0,0,292,294,3,103,51,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,
        0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,0,298,299,5,
        39,0,0,299,88,1,0,0,0,300,303,3,91,45,0,301,303,3,93,46,0,302,300,
        1,0,0,0,302,301,1,0,0,0,303,90,1,0,0,0,304,306,5,45,0,0,305,304,
        1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,311,3,99,49,0,308,310,
        3,97,48,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,
        1,0,0,0,312,320,1,0,0,0,313,311,1,0,0,0,314,316,5,48,0,0,315,314,
        1,0,0,0,316,317,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,320,
        1,0,0,0,319,305,1,0,0,0,319,315,1,0,0,0,320,92,1,0,0,0,321,323,3,
        91,45,0,322,321,1,0,0,0,322,323,1,0,0,0,323,324,1,0,0,0,324,325,
        5,46,0,0,325,326,3,91,45,0,326,94,1,0,0,0,327,328,7,0,0,0,328,96,
        1,0,0,0,329,330,7,1,0,0,330,98,1,0,0,0,331,332,7,2,0,0,332,100,1,
        0,0,0,333,336,5,95,0,0,334,336,3,95,47,0,335,333,1,0,0,0,335,334,
        1,0,0,0,336,102,1,0,0,0,337,341,3,95,47,0,338,341,3,97,48,0,339,
        341,5,95,0,0,340,337,1,0,0,0,340,338,1,0,0,0,340,339,1,0,0,0,341,
        104,1,0,0,0,342,343,5,105,0,0,343,348,5,110,0,0,344,345,5,111,0,
        0,345,346,5,117,0,0,346,348,5,116,0,0,347,342,1,0,0,0,347,344,1,
        0,0,0,348,106,1,0,0,0,349,351,5,13,0,0,350,349,1,0,0,0,350,351,1,
        0,0,0,351,352,1,0,0,0,352,353,5,10,0,0,353,108,1,0,0,0,354,356,7,
        3,0,0,355,354,1,0,0,0,356,357,1,0,0,0,357,355,1,0,0,0,357,358,1,
        0,0,0,358,359,1,0,0,0,359,360,6,54,0,0,360,110,1,0,0,0,361,365,5,
        35,0,0,362,364,8,4,0,0,363,362,1,0,0,0,364,367,1,0,0,0,365,363,1,
        0,0,0,365,366,1,0,0,0,366,368,1,0,0,0,367,365,1,0,0,0,368,369,6,
        55,0,0,369,112,1,0,0,0,21,0,259,265,271,277,280,282,288,295,302,
        305,311,317,319,322,335,340,347,350,357,365,1,6,0,0
    ]

class PdawLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    IMPORT = 29
    PATCH = 30
    FUNC = 31
    BLOCK = 32
    RETURN = 33
    CONNECT = 34
    END = 35
    IF = 36
    ELIF = 37
    ELSE = 38
    FOR = 39
    VARTYPE = 40
    IOLET = 41
    NAME = 42
    VARNAME = 43
    SYMBOL = 44
    NUMBER = 45
    INTEGER = 46
    FLOAT = 47
    NL = 48
    WS = 49
    COMMENT = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'{'", "'..'", "'@'", "'='", "'['", "','", "']'", "'.'", 
            "'('", "')'", "':'", "'*'", "'/'", "'*~'", "'/~'", "'+'", "'-'", 
            "'+~'", "'-~'", "'%'", "'=='", "'!='", "'>='", "'<'", "'<='", 
            "'in range'", "'}'", "'import'", "'patch'", "'func'", "'block'", 
            "'return'", "'>'", "'end'", "'if'", "'elif'", "'else'", "'for'" ]

    symbolicNames = [ "<INVALID>",
            "IMPORT", "PATCH", "FUNC", "BLOCK", "RETURN", "CONNECT", "END", 
            "IF", "ELIF", "ELSE", "FOR", "VARTYPE", "IOLET", "NAME", "VARNAME", 
            "SYMBOL", "NUMBER", "INTEGER", "FLOAT", "NL", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "IMPORT", "PATCH", "FUNC", "BLOCK", 
                  "RETURN", "CONNECT", "END", "IF", "ELIF", "ELSE", "FOR", 
                  "VARTYPE", "IOLET", "NAME", "VARNAME", "SYMBOL", "NUMBER", 
                  "INTEGER", "FLOAT", "LETTER", "DIGIT", "NON_ZERO_DIGIT", 
                  "ID_START", "ID_CONTINUE", "IOLET_START", "NL", "WS", 
                  "COMMENT" ]

    grammarFileName = "Pdaw.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


